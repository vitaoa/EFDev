var through = require('through2'),
    gutil = require('gulp-util'),
    css = require('css'),
    PluginError = gutil.PluginError;

const PLUGIN_NAME = 'gulp-css-format';

function convert2CSS(obj,tab, indent, hasSpace) {

	var result = '';

	var tabSetting = (function() {
		var tmpStr = '';
		for (var i = 0; i < tab; i++) {
			tmpStr += ' ';
		}
		return tmpStr;
	}());

	/**
	 * [设置{}与属性设置之间的间距]
	 * @return {string}   [需要设置的间距]
	 */
	var indentSetting = (function() {
		var tmpStr = '';
		for (var i = 0; i < indent; i++) {
			tmpStr += ' ';
		}
		return tmpStr;
	}());

	/**
	 * [设置 属性 key 与 value之间的的间距]
	 * @return {string}   [空 或者 单个空格]
	 */
	var spaceSetting = (function() {
		if (hasSpace) {
			return ' ';
		} else {
			return '';
		}
	}());

	var processCssRule = function(item, isMedia) {
		var ruleStr = '',
			propertyStr = '';

		if(item.type =='comment'){
			if (isMedia){
				ruleStr = '\r\n' + tabSetting + '/* ' + item.comment + ' */\r\n';
			}else{
				ruleStr = '/* ' + item.comment + ' */\r\n';
			}

		}
		if(item.declarations){
			item.declarations.forEach(function(prop) {
				propertyStr += prop.property + ':' + spaceSetting + prop.value + ';';
			});
			if (isMedia) {
				ruleStr = tabSetting + item.selectors + '{' + indentSetting + propertyStr + indentSetting + '}\r\n';
			} else {
				ruleStr = item.selectors + '{' + indentSetting + propertyStr + indentSetting + '}\r\n';
			}
		}

		return ruleStr;
	}
	var processCssRule2 = function(item) {
		var ruleStr = '',
			propertyStr = '';
			if(item.property =='src'){
				propertyStr = tabSetting + item.property + ':';
				var urlList = item.value.split(',');
				urlList.forEach(function(prop,index) {
					if(index === 0){
						propertyStr += prop + ',\r\n';
					} else if(urlList.length-1===index){
						propertyStr += tabSetting + tabSetting + prop + ';\r\n';
					} else{
						propertyStr += tabSetting + tabSetting + prop + ',\r\n';
					}
				});
			}else{
				propertyStr = tabSetting + item.property + ':' + spaceSetting + item.value + ';\r\n';
			}
		return propertyStr;
	}

	var processCssRule3 = function(item) {
		var ruleStr = '',
			propertyStr = '';

		if(item.declarations){
			item.declarations.forEach(function(prop) {
				propertyStr += prop.property + ':' + spaceSetting + prop.value + ';';
			});
			ruleStr = tabSetting + item.values + '{' + indentSetting + propertyStr + indentSetting + '}\r\n';
		}

		return ruleStr;
	}

	obj.stylesheet.rules.forEach(function(item) {


		var _type = item.type;
		if (_type !== 'rule') {
			switch(_type) {
				case 'comment':
					result += '\r\n/* ' + item.comment + ' */\r\n';
					break;
				case 'keyframes':
					if(item.vendor){
						result += '@' + item.vendor + 'keyframes ' + item.name + '{\r\n';
					}else{
						result += '@keyframes ' + item.name + '{\r\n';
					}
					item.keyframes.forEach(function(item) {
						result += processCssRule3(item);
					});
					result += '}\r\n';
					break;
				case 'media':
					result += '@media ' + item.media + ' {\r\n';
					item.rules.forEach(function(item) {
						result += processCssRule(item, 1);
					});
					result += '}\r\n';
					break;
				case 'charset':
					result += '@charset ' + item.charset + ';\r\n';
					break;
				case 'import':
					result += '@import ' + item.import + ';\r\n';
					break;
				case 'font-face':
					result += '@font-face' + ' {\r\n';
					item.declarations.forEach(function(item) {
						result += processCssRule2(item);
					});
					result += '}\r\n';
					break;
			}
		} else {
			result += processCssRule(item);
		}
	});

	return result;
}

function gulpCssOneline(optionObj) {
	var option = {
		tab:0,
		indent:0,
		hasSpace:false
	}

	if (!!optionObj) {
		if (typeof optionObj.indent !== 'number'
			|| typeof optionObj.hasSpace !== 'boolean') {
			throw new PluginError(PLUGIN_NAME, ': Wrong Plugin Option Value');
		}
		option = optionObj;
	}

    return through.obj(function(file, enc, cb) {
        var content = file.contents.toString();
        var cssObj = css.parse(content);

        if (!!cssObj.parsingErrors) {
			throw new PluginError(PLUGIN_NAME, ': CSS Syntax Error');
        }
        content = convert2CSS(cssObj, option.tab, option.indent, option.hasSpace);
        file.contents = new Buffer(content);

        this.push(file);
        cb();
    });
}

module.exports = gulpCssOneline;
